\DOC new_names

\BLTYPE
new_names : (((string # address) list -> (string # address) list) ->
             string ->
             (string # int) list ->
             print_binding ->
             metavar_binding)
\ELTYPE

\SYNOPSIS
Function for transforming a list of node-names bound to a metavariable.

\LIBRARY prettyp

\DESCRIBE
Within the metavariable transformation part of a pretty-printing rule, a
typical requirement is to `declare' a new metavariable to be bound to the
result of performing a transformation on a single existing metavariable. The
type of function required is:
{
   (string # int) list -> print_binding -> metavar_binding
}
\noindent There are four functions available to facilitate this, corresponding
to the four different types of data which can be bound to a metavariable.
{new_names} is the function for use when the data is a list of node-names.

The first argument is the transformation function. The second argument is the
name of the metavariable which is bound to the value to be transformed. When
provided with these arguments and a pretty-printer environment, {new_names}
extracts the item bound to the named metavariable and then applies the
transformation function to it. The result is then made into a form suitable
for binding to a metavariable, that is it is made into an object of type
{metavar_binding}.

Note that the transformation function has to deal with sub-tree addresses in
addition to the node-names. If the transformation function is polymorphic, as
is for example a function to reverse the list, this will not cause any
difficulties. The addresses have to be dealt with by the transformation
function because the system cannot know how to re-assign addresses to the
values in the result list.

\FAILURE
{new_names} fails if the named metavariable does not exist or is bound to an
item of the wrong type.

\SEEALSO
new_name, new_child, new_children, bound_names.

\ENDDOC
