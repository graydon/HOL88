\DOC term_to_print_tree

\TYPE {term_to_print_tree : (bool -> type_selection -> term -> print_tree)}

\SYNOPSIS
Function for converting a HOL term into a print-tree.

\LIBRARY prettyp

\DESCRIBE
The first argument to {term_to_print_tree} is a flag. If the flag is {true},
the function converts instances of the HOL constant {UNCURRY} in the term
into an appropriate use of ordered pairs in the print-tree. If the flag is
{false}, {UNCURRY} is treated in the same way as any other HOL constant. The
conversion is necessary because the representation of tuples of bound
variables in a HOL term is so unlike the syntax of the tuples that the
pretty-printer cannot handle them. So, normally, the flag should be set to
{true}.

The second argument to {term_to_print_tree} controls the amount of type
information included in the print-tree of the term. If {No_types} is given as
the argument, then the print-tree will contain no type information. If
{All_types} is given as the argument, the tree will contain type information
for every variable and constant. Use of {Useful_types} instructs
{term_to_print_tree} to attach type information to the bound variables of
abstractions, and to one occurrence of every free variable. Type information
is only included for constants if the constant is a function and it is not
fully applied. So, the equals sign in {"1 = 2"} would not be adorned with type
information, but in {"$= 1"} it would be.

Finally, using {Hidden_types} as the second argument to {term_to_print_tree}
causes type information to be attached only to variables which, although free,
without type information appear to be bound. An example of such a variable is
{"x:num"} in the term:
{
   "\(x:bool). (x:num)"
}
\noindent Without types, this term appears as {"\x. x"}. However, the two
occurrences of {x} are different.

\FAILURE
Never fails.

\EXAMPLE
{
#term_to_print_tree true No_types "\x. x /\ T";;
Print_node(`term`,
           [Print_node(`ABS`,
                       [Print_node(`VAR`, [Print_node(`x`, [])]);
                        Print_node(`COMB`,
                                   [Print_node(`COMB`,
                                               [Print_node(`CONST`,
                                                           [Print_node(`/\`,
                                                                       [])]);
                                                Print_node(`VAR`,
                                                           [Print_node(`x`,
                                                                       [])])]);
                                    Print_node(`CONST`,
                                               [Print_node(`T`, [])])])])])
: print_tree
}
\SEEALSO
type_to_print_tree, thm_to_print_tree, pp_convert_term.

\ENDDOC
