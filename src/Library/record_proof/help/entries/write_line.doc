\DOC write_line

\TYPE {write_line : string -> line -> void}

\KEYWORDS
proof recording.

\LIBRARY
record_proof

\SYNOPSIS
Output a proof line to a port.

\DESCRIBE
A proof is a list of inference steps.  The proof recorder records
every inference performed by the system in an internal buffer.
When a proof is completed, the raw records are converted into a list
of proof lines as in Hilbert's style proofs. These lines are then
output to a disk file. This file is in the {prf} format specified in
[1].

{write_line} is the output function for writing a proof line to a
output port. The first argument is a string representing a port. It
should be the value returned by the system function {openw}.


\FAILURE
Never fail.

\EXAMPLE
Below is an example showing the use of this function in writing the
proof lines of an extremely simple proof:
{
#let th = SPEC_ALL ADD_SYM;;
Theorem ADD_SYM autoloading from theory `arithmetic` ...
ADD_SYM = |- !m n. m + n = n + m

th = |- m + n = n + m

#let v = genvar ":num";;
"GEN%VAR%385" : term

#record_proof true;;
() : void

#let th1 = (REFL "SUC(m + n)");;
th1 = |- SUC(m + n) = SUC(m + n)

#let th2 = SUBST [th,v] "SUC(m + n) = SUC ^v" th1;;
th2 = |- SUC(m + n) = SUC(n + m)

#get_steps();;
[SubstStep([(|- m + n = n + m, "GEN%VAR%385")],
           "SUC(m + n) = SUC GEN%VAR%385",
           |- SUC(m + n) = SUC(m + n));
 ReflStep"SUC(m + n)"]
: step list

#MakeProof it;;
[Line(-1, |- m + n = n + m, Hypothesis);
 Line(1, |- SUC(m + n) = SUC(m + n), Refl"SUC(m + n)");
 Line(2,
      |- SUC(m + n) = SUC(n + m),
      Subst([(-1, "GEN%VAR%385")], "SUC(m + n) = SUC GEN%VAR%385", 1))]
: line list

#map (write_line port) it;;
() : void
}
{port} is assumed has been connected to a file that is opened for
writing.

\COMMENTS
This function is used to implement higher level user functions for
recording proof in the library {record_proof}. It is much more
convenient to use those functions than this low level function directly.

\SEEALSO
write_thm_list, write_env,
write_proof_add_to, write_proof_to, write_last_proof,
current_proof, current_proof_file,
new_proof_file, close_proof_file, begin_proof, end_proof,
TAC_PROOF, PROVE, prove, prove_thm

\ENDDOC
