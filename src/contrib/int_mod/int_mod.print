print_theory `int_mod`;;
The Theory int_mod
Parents --  HOL     more_gp     integer     int_sbgp     
Constants --
  int_mod ":integer -> ((integer -> bool) -> bool)"
  plus_mod
    ":integer ->
      ((integer -> bool) -> ((integer -> bool) -> (integer -> bool)))"
  mod ":integer -> (integer -> (integer -> bool))"
  minus_mod
    ":integer ->
      ((integer -> bool) -> ((integer -> bool) -> (integer -> bool)))"
  
Definitions --
  INT_MOD_DEF
    |- !n. int_mod n = quot_set((\N. T),$plus)(int_mult_set n)
  PLUS_MOD_DEF
    |- !n. plus_mod n = quot_prod((\N. T),$plus)(int_mult_set n)
  MOD_DEF  |- !n m. mod n m = LEFT_COSET((\N. T),$plus)(int_mult_set n)m
  MINUS_MOD_DEF
    |- !n m p.
        minus_mod n m p = plus_mod n m(INV(int_mod n,plus_mod n)p)
  
Theorems --
  INT_MOD_MOD_LEMMA
    |- (!m. int_mod n(mod n m)) /\ (int_mod n q ==> (?m. q = mod n m))
  PLUS_MOD_LEMMA
    |- !x y. plus_mod n(mod n x)(mod n y) = mod n(x plus y)
  int_mod_as_GROUP  |- GROUP(int_mod n,plus_mod n)
  MOD_NAT_HOM_LEMMA  |- mod n = NAT_HOM((\N. T),$plus)(int_mult_set n)
  ID_EQ_MOD_0  |- ID(int_mod n,plus_mod n) = mod n(INT 0)
  INV_EQ_MOD_NEG
    |- !m. INV(int_mod n,plus_mod n)(mod n m) = mod n(neg m)
  MINUS_MOD_LEMMA
    |- !m p. minus_mod n(mod n m)(mod n p) = mod n(m minus p)
  INT_MOD_CLOSURE  |- !m1 m2. int_mod n(plus_mod n(mod n m1)(mod n m2))
  INT_MOD_GROUP_ASSOC
    |- !m1 m2 m3.
        plus_mod n(plus_mod n(mod n m1)(mod n m2))(mod n m3) =
        plus_mod n(mod n m1)(plus_mod n(mod n m2)(mod n m3))
  INT_MOD_ID_LEMMA
    |- !m1.
        (plus_mod n(mod n(INT 0))(mod n m1) = mod n m1) /\
        (plus_mod n(mod n m1)(mod n(INT 0)) = mod n m1) /\
        (?y. int_mod n y /\ (plus_mod n y(mod n m1) = mod n(INT 0)))
  INT_MOD_LEFT_RIGHT_INV
    |- !m2 m1.
        (plus_mod n(mod n m2)(mod n m1) = mod n(INT 0)) ==>
        (plus_mod n(mod n m1)(mod n m2) = mod n(INT 0))
  INT_MOD_INV_LEMMA
    |- !m1.
        (plus_mod n(mod n(neg m1))(mod n m1) = mod n(INT 0)) /\
        (minus_mod n(mod n m1)(mod n m1) = mod n(INT 0))
  INT_MOD_LEFT_CANCELLATION
    |- !m1 m2 m3.
        (plus_mod n(mod n m1)(mod n m2) =
         plus_mod n(mod n m1)(mod n m3)) ==>
        (mod n m2 = mod n m3)
  INT_MOD_RIGHT_CANCELLATION
    |- !m2 m1 m3.
        (plus_mod n(mod n m2)(mod n m1) =
         plus_mod n(mod n m3)(mod n m1)) ==>
        (mod n m2 = mod n m3)
  INT_MOD_RIGHT_ONE_ONE_ONTO
    |- !m1 m2.
        ?z.
         int_mod n z /\
         (plus_mod n(mod n m1)z = mod n m2) /\
         (!u.
           int_mod n u /\ (plus_mod n(mod n m1)u = mod n m2) ==> (u = z))
  INT_MOD_LEFT_ONE_ONE_ONTO
    |- !m1 m2.
        ?z.
         int_mod n z /\
         (plus_mod n z(mod n m1) = mod n m2) /\
         (!u.
           int_mod n u /\ (plus_mod n u(mod n m1) = mod n m2) ==>
           (u = z))
  INT_MOD_UNIQUE_ID
    |- !e m1.
        (int_mod n e ==>
         (plus_mod n e(mod n m1) = mod n m1) ==>
         (e = mod n(INT 0))) /\
        (int_mod n e ==>
         (plus_mod n(mod n m1)e = mod n m1) ==>
         (e = mod n(INT 0)))
  INT_MOD_UNIQUE_INV
    |- !u m1.
        int_mod n u ==>
        (plus_mod n u(mod n m1) = mod n(INT 0)) ==>
        (u = mod n(neg m1))
  INT_MOD_INV_ID_LEMMA  |- mod n(neg(INT 0)) = mod n(INT 0)
  INT_MOD_INV_INV_LEMMA  |- !m1. mod n(neg(neg m1)) = mod n m1
  INT_MOD_DIST_INV_LEMMA
    |- !m1 m2.
        minus_mod n(mod n(neg m1))(mod n m2) =
        INV(int_mod n,plus_mod n)(plus_mod n(mod n m2)(mod n m1))
  
******************** int_mod ********************

() : void
