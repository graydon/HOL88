(setq %theorydata '((parents transfinite quotient fixpoints pred_sets auxiliary HOL) (types (1 . card)) (nametypes) (operators (FUNC fun (fun (%VARTYPE . *) (bool)) (fun (fun (%VARTYPE . *) (bool)) (fun (%VARTYPE . *) (%VARTYPE . *)))) (PROJ_card fun (fun (%VARTYPE . *) (bool)) (card (%VARTYPE . *))) (ABS_card fun (fun (fun (%VARTYPE . *) (bool)) (bool)) (card (%VARTYPE . *))) (REP_card fun (card (%VARTYPE . *)) (fun (fun (%VARTYPE . *) (bool)) (bool))) (EQUI_POTENT fun (fun (%VARTYPE . *) (bool)) (fun (fun (%VARTYPE . *) (bool)) (bool)))) (paired-infixes) (curried-infixes (<<< fun (card (%VARTYPE . *)) (fun (card (%VARTYPE . *)) (bool))) (SLEQ fun (fun (%VARTYPE . *) (bool)) (fun (fun (%VARTYPE . *) (bool)) (bool)))) (predicates) (version . "1.12 (pre-release)") (stamp . 659565894)))
(setq %theorems '((sharetypes 14 (RESTRICT%13 prod (%VARTYPE . *) (fun (%VARTYPE . *) (%VARTYPE . *))) (UNCURRY%12 fun (prod (%VARTYPE . *) (fun (%VARTYPE . *) (%VARTYPE . *))) (%VARTYPE . *)) (y%11 %VARTYPE . *) (f%10 fun (card (%VARTYPE . *)) (fun (card (%VARTYPE . *)) (bool))) (h%9 fun (card (%VARTYPE . *)) (%VARTYPE . **)) (f%8 fun (fun (%VARTYPE . *) (bool)) (%VARTYPE . **)) (PROJ_card%7 fun (fun (%VARTYPE . *) (bool)) (card (%VARTYPE . *))) (REP_card%6 fun (fun (%VARTYPE . *) (bool)) (bool)) (a%5 card (%VARTYPE . *)) (IS_CLASS%4 fun (fun (fun (%VARTYPE . *) (bool)) (bool)) (bool)) (rep%3 fun (card (%VARTYPE . *)) (fun (fun (%VARTYPE . *) (bool)) (bool))) (EQUI_POTENT%2 fun (fun (%VARTYPE . *) (bool)) (fun (fun (%VARTYPE . *) (bool)) (bool))) (f%1 fun (%VARTYPE . *) (%VARTYPE . *)) (A%0 fun (%VARTYPE . *) (bool))) (axiom (FUNC pred HOL_ASSERT comb ((const HOL_DEFINITION) comb ((const !) abs ((var A %t . A%0) comb ((const !) abs ((var B %t . A%0) comb ((const !) abs ((var y %t . y%11) comb ((comb ((const =) comb ((comb ((comb ((const FUNC) var A %t . A%0)) var B %t . A%0)) var y %t . y%11) %t . y%11)) comb ((comb ((const LET) comb ((const UNCURRY) abs ((var z %t . y%11) abs ((var f %t . f%1) comb ((comb ((comb ((const COND) comb ((const ?) abs ((var |y'| %t . y%11) comb ((comb ((const |/\\|) comb ((var B %t . A%0) var |y'|))) comb ((const !) abs ((var w %t . y%11) comb ((comb ((const ==>) comb ((comb ((const |/\\|) comb ((comb ((const WLESS) var w %t . y%11)) var z %t . y%11))) comb ((var A %t . A%0) var w)))) comb ((const ~) comb ((comb ((const =) var |y'| %t . y%11)) comb ((var f %t . f%1) var w))))))))) bool)) comb ((const @) abs ((var |y'| %t . y%11) comb ((comb ((const |/\\|) comb ((var B %t . A%0) var |y'|))) comb ((const !) abs ((var w %t . y%11) comb ((comb ((const ==>) comb ((comb ((const |/\\|) comb ((comb ((const WLESS) var w %t . y%11)) var z %t . y%11))) comb ((var A %t . A%0) var w)))) comb ((const ~) comb ((comb ((const =) var |y'| %t . y%11)) comb ((var f %t . f%1) var w))))))))) %t . y%11)) comb ((const @) abs ((var |y'| %t . y%11) comb ((var B %t . A%0) var |y'|))) %t . y%11) %t . y%11))) %t . UNCURRY%12)) comb ((comb ((const RESTRICT) var y %t . y%11)) comb ((comb ((const FUNC) var A %t . A%0)) var B %t . A%0) %t . f%1) %t . RESTRICT%13) %t . y%11) bool)) bool)) bool)))) (CLEQ pred HOL_ASSERT comb ((const HOL_DEFINITION) comb ((const !) abs ((var p1 %t . A%0) comb ((const !) abs ((var p2 %t . A%0) comb ((comb ((const =) comb ((comb ((const <<<) comb ((const PROJ_card) var p1 %t . A%0) %t . a%5)) comb ((const PROJ_card) var p2 %t . A%0) %t . a%5) bool)) comb ((comb ((const SLEQ) var p1 %t . A%0)) var p2 %t . A%0) bool) bool)) bool)))) (PROJ_card pred HOL_ASSERT comb ((const HOL_DEFINITION) comb ((const !) abs ((var x %t . A%0) comb ((comb ((const =) comb ((const PROJ_card) var x %t . A%0) %t . a%5)) comb ((const ABS_card) comb ((comb ((const MK_CLASS) const EQUI_POTENT %t . EQUI_POTENT%2)) var x %t . A%0) %t . REP_card%6) %t . a%5) bool)))) (card_ISO_DEF pred HOL_ASSERT comb ((const HOL_DEFINITION) comb ((comb ((const |/\\|) comb ((const !) abs ((var a %t . a%5) comb ((comb ((const =) comb ((const ABS_card) comb ((const REP_card) var a %t . a%5) %t . REP_card%6) %t . a%5)) var a %t . a%5) bool)))) comb ((const !) abs ((var r %t . REP_card%6) comb ((comb ((const =) comb ((comb ((const IS_CLASS) const EQUI_POTENT %t . EQUI_POTENT%2)) var r %t . REP_card%6) bool)) comb ((comb ((const =) comb ((const REP_card) comb ((const ABS_card) var r %t . REP_card%6) %t . a%5) %t . REP_card%6)) var r %t . REP_card%6) bool) bool))))) (card_TY_DEF pred HOL_ASSERT comb ((const HOL_DEFINITION) comb ((const ?) abs ((var rep %t . rep%3) comb ((comb ((const TYPE_DEFINITION) comb ((const IS_CLASS) const EQUI_POTENT %t . EQUI_POTENT%2) %t . IS_CLASS%4)) var rep %t . rep%3) bool)))) (SLEQ pred HOL_ASSERT comb ((const HOL_DEFINITION) comb ((const !) abs ((var A %t . A%0) comb ((const !) abs ((var B %t . A%0) comb ((comb ((const =) comb ((comb ((const SLEQ) var A %t . A%0)) var B %t . A%0) bool)) comb ((const ?) abs ((var f %t . f%1) comb ((comb ((comb ((const >-->) var A %t . A%0)) var B %t . A%0)) var f %t . f%1) bool)) bool) bool)) bool)))) (EQUI_POTENT pred HOL_ASSERT comb ((const HOL_DEFINITION) comb ((const !) abs ((var A %t . A%0) comb ((const !) abs ((var B %t . A%0) comb ((comb ((const =) comb ((comb ((const EQUI_POTENT) var A %t . A%0)) var B %t . A%0) bool)) comb ((const ?) abs ((var f %t . f%1) comb ((comb ((comb ((const <-->) var A %t . A%0)) var B %t . A%0)) var f %t . f%1) bool)) bool) bool)) bool))))) (fact (LINEAR_CLEQ pred HOL_ASSERT comb ((const !) abs ((var a %t . a%5) comb ((const !) abs ((var b %t . a%5) comb ((comb ((const |\\/|) comb ((comb ((const <<<) var a %t . a%5)) var b %t . a%5))) comb ((comb ((const <<<) var b %t . a%5)) var a %t . a%5)))) bool)) bool) (ANTI_SYM_CLEQ pred HOL_ASSERT comb ((const !) abs ((var a %t . a%5) comb ((const !) abs ((var b %t . a%5) comb ((comb ((const ==>) comb ((comb ((const |/\\|) comb ((comb ((const <<<) var a %t . a%5)) var b %t . a%5))) comb ((comb ((const <<<) var b %t . a%5)) var a %t . a%5)))) comb ((comb ((const =) var a %t . a%5)) var b %t . a%5)))) bool)) bool) (CLEQ_TRANSITIVITY pred HOL_ASSERT comb ((const !) abs ((var a %t . a%5) comb ((const !) abs ((var b %t . a%5) comb ((const !) abs ((var c %t . a%5) comb ((comb ((const ==>) comb ((comb ((const |/\\|) comb ((comb ((const <<<) var a %t . a%5)) var b %t . a%5))) comb ((comb ((const <<<) var b %t . a%5)) var c %t . a%5)))) comb ((comb ((const <<<) var a %t . a%5)) var c %t . a%5)))) bool)) bool)) bool) (CLEQ_REFLEX pred HOL_ASSERT comb ((const !) abs ((var a %t . a%5) comb ((comb ((const <<<) var a %t . a%5)) var a %t . a%5) bool)) bool) (CLEQ_UNIQUE pred HOL_ASSERT comb ((const !) abs ((var f %t . f%10) comb ((comb ((const ==>) comb ((const !) abs ((var p1 %t . A%0) comb ((const !) abs ((var p2 %t . A%0) comb ((comb ((const =) comb ((comb ((var f %t . f%10) comb ((const PROJ_card) var p1 %t . A%0))) comb ((const PROJ_card) var p2 %t . A%0)))) comb ((comb ((const SLEQ) var p1 %t . A%0)) var p2 %t . A%0) bool) bool)) bool)))) comb ((comb ((const =) const <<< %t . f%10)) var f %t . f%10)))) bool) (FACTOR_PROJ_card_THM pred HOL_ASSERT comb ((const !) abs ((var f %t . f%8) comb ((comb ((const ==>) comb ((const !) abs ((var x %t . A%0) comb ((const !) abs ((var y %t . A%0) comb ((comb ((const ==>) comb ((comb ((const EQUI_POTENT) var x %t . A%0)) var y %t . A%0))) comb ((comb ((const =) comb ((var f %t . f%8) var x))) comb ((var f %t . f%8) var y))))) bool)))) comb ((const ?!) abs ((var h %t . h%9) comb ((comb ((const =) var f %t . f%8)) comb ((comb ((const o) var h %t . h%9)) const PROJ_card %t . PROJ_card%7) %t . f%8) bool))))) bool) (UNIV_PROJ_card_THM pred HOL_ASSERT comb ((const !) abs ((var x %t . A%0) comb ((const !) abs ((var y %t . A%0) comb ((comb ((const =) comb ((comb ((const =) comb ((const PROJ_card) var x %t . A%0) %t . a%5)) comb ((const PROJ_card) var y %t . A%0) %t . a%5) bool)) comb ((comb ((const EQUI_POTENT) var x %t . A%0)) var y %t . A%0) bool) bool)) bool)) bool) (SURJ_PROJ_card_THM pred HOL_ASSERT comb ((const ONTO) const PROJ_card %t . PROJ_card%7) bool) (EQUIVALENCE_CARD pred HOL_ASSERT comb ((const EQUIVALENCE) const EQUI_POTENT %t . EQUI_POTENT%2) bool))))
