(setq %theorydata '((parents quotient auxiliary HOL) (types (0 . zet)) (nametypes) (operators (PI fun (list (zet)) (zet)) (SIGMA fun (list (zet)) (zet)) (MAX fun (fun (zet) (bool)) (zet)) (MIN fun (fun (zet) (bool)) (zet)) (NEG fun (zet) (bool)) (POS fun (zet) (bool)) (een zet) (zero zet) (INT fun (num) (zet)) (REV fun (zet) (zet)) (PROJ_zet fun (prod (num) (num)) (zet)) (ABS_zet fun (fun (prod (num) (num)) (bool)) (zet)) (REP_zet fun (zet) (fun (prod (num) (num)) (bool))) (PRE_REV fun (prod (num) (num)) (prod (num) (num))) (ZET_REL fun (prod (num) (num)) (fun (prod (num) (num)) (bool)))) (paired-infixes) (curried-infixes (less fun (zet) (fun (zet) (bool))) (mult fun (zet) (fun (zet) (zet))) (leq fun (zet) (fun (zet) (bool))) (minus fun (zet) (fun (zet) (zet))) (plus fun (zet) (fun (zet) (zet))) (PRE_MULT fun (prod (num) (num)) (fun (prod (num) (num)) (prod (num) (num)))) (PRE_PLUS fun (prod (num) (num)) (fun (prod (num) (num)) (prod (num) (num))))) (predicates) (version . "1.12 (pre-release)") (stamp . 659566588)))
(setq %theorems '((sharetypes 13 (tl%12 list (zet)) (f%11 fun (zet) (%VARTYPE . *)) (fd%10 fun (%VARTYPE . *) (fun (zet) (%VARTYPE . *))) (c%9 %VARTYPE . *) (Q%8 fun (zet) (bool)) (f%7 fun (zet) (fun (zet) (zet))) (f%6 fun (zet) (zet)) (h%5 fun (zet) (%VARTYPE . **)) (f%4 fun (prod (num) (num)) (%VARTYPE . **)) (r%3 fun (prod (num) (num)) (bool)) (IS_CLASS%2 fun (fun (prod (num) (num)) (bool)) (bool)) (rep%1 fun (zet) (fun (prod (num) (num)) (bool))) (|,%0| prod (num) (num))) (axiom (PI pred HOL_ASSERT comb ((const HOL_DEFINITION) comb ((comb ((const |/\\|) comb ((comb ((const =) comb ((const PI) const NIL))) const een))) comb ((const !) abs ((var h zet) comb ((const !) abs ((var tl %t . tl%12) comb ((comb ((const =) comb ((const PI) comb ((comb ((const CONS) var h zet)) var tl %t . tl%12)))) comb ((comb ((const mult) var h)) comb ((const PI) var tl))) bool)) bool))))) (SIGMA pred HOL_ASSERT comb ((const HOL_DEFINITION) comb ((comb ((const |/\\|) comb ((comb ((const =) comb ((const SIGMA) const NIL))) const zero))) comb ((const !) abs ((var h zet) comb ((const !) abs ((var tl %t . tl%12) comb ((comb ((const =) comb ((const SIGMA) comb ((comb ((const CONS) var h zet)) var tl %t . tl%12)))) comb ((comb ((const plus) var h)) comb ((const SIGMA) var tl))) bool)) bool))))) (MAX pred HOL_ASSERT comb ((const HOL_DEFINITION) comb ((const !) abs ((var Q %t . Q%8) comb ((comb ((const =) comb ((const MAX) var Q))) comb ((const @) abs ((var x zet) comb ((comb ((const |/\\|) comb ((var Q %t . Q%8) var x))) comb ((const !) abs ((var y zet) comb ((comb ((const ==>) comb ((var Q %t . Q%8) var y))) comb ((comb ((const leq) var y)) var x))))))) zet) bool)))) (MIN pred HOL_ASSERT comb ((const HOL_DEFINITION) comb ((const !) abs ((var Q %t . Q%8) comb ((comb ((const =) comb ((const MIN) var Q))) comb ((const @) abs ((var x zet) comb ((comb ((const |/\\|) comb ((var Q %t . Q%8) var x))) comb ((const !) abs ((var y zet) comb ((comb ((const ==>) comb ((var Q %t . Q%8) var y))) comb ((comb ((const leq) var x)) var y))))))) zet) bool)))) (LESS pred HOL_ASSERT comb ((const HOL_DEFINITION) comb ((const !) abs ((var x zet) comb ((const !) abs ((var y zet) comb ((comb ((const =) comb ((comb ((const less) var x)) var y))) comb ((comb ((const leq) comb ((comb ((const plus) var x)) const een))) var y)) bool)) bool)))) (MULT pred HOL_ASSERT comb ((const HOL_DEFINITION) comb ((const !) abs ((var p11 num) comb ((const !) abs ((var p12 num) comb ((const !) abs ((var p2 num) comb ((const !) abs ((var p3 num) comb ((comb ((const =) comb ((comb ((const mult) comb ((const PROJ_zet) comb ((comb ((const |,|) var p11 num)) var p12 num)))) comb ((const PROJ_zet) comb ((comb ((const |,|) var p2 num)) var p3 num))))) comb ((const PROJ_zet) comb ((comb ((const |,|) comb ((comb ((const +) comb ((comb ((const *) var p11)) var p2))) comb ((comb ((const *) var p12)) var p3)))) comb ((comb ((const +) comb ((comb ((const *) var p11)) var p3))) comb ((comb ((const *) var p2)) var p12))))) bool)) bool)) bool)) bool)))) (LEQ pred HOL_ASSERT comb ((const HOL_DEFINITION) comb ((const !) abs ((var x zet) comb ((const !) abs ((var y zet) comb ((comb ((const =) comb ((comb ((const leq) var x)) var y))) comb ((const POS) comb ((comb ((const minus) var y)) var x))) bool)) bool)))) (MINUS pred HOL_ASSERT comb ((const HOL_DEFINITION) comb ((const !) abs ((var x zet) comb ((const !) abs ((var y zet) comb ((comb ((const =) comb ((comb ((const minus) var x)) var y))) comb ((comb ((const plus) var x)) comb ((const REV) var y))) bool)) bool)))) (PLUS pred HOL_ASSERT comb ((const HOL_DEFINITION) comb ((const !) abs ((var p11 num) comb ((const !) abs ((var p12 num) comb ((const !) abs ((var p2 num) comb ((const !) abs ((var p3 num) comb ((comb ((const =) comb ((comb ((const plus) comb ((const PROJ_zet) comb ((comb ((const |,|) var p11 num)) var p12 num)))) comb ((const PROJ_zet) comb ((comb ((const |,|) var p2 num)) var p3 num))))) comb ((const PROJ_zet) comb ((comb ((const |,|) comb ((comb ((const +) var p11)) var p2))) comb ((comb ((const +) var p12)) var p3)))) bool)) bool)) bool)) bool)))) (NEG pred HOL_ASSERT comb ((const HOL_DEFINITION) comb ((const !) abs ((var x zet) comb ((comb ((const =) comb ((const NEG) var x))) comb ((const POS) comb ((const REV) var x))) bool)))) (POS pred HOL_ASSERT comb ((const HOL_DEFINITION) comb ((const !) abs ((var x zet) comb ((comb ((const =) comb ((const POS) var x))) comb ((const ?) abs ((var y num) comb ((comb ((const =) var x zet)) comb ((const INT) var y)) bool)) bool) bool)))) (ONE pred HOL_ASSERT comb ((const HOL_DEFINITION) comb ((comb ((const =) const een)) comb ((const INT) const |1|)))) (ZERO pred HOL_ASSERT comb ((const HOL_DEFINITION) comb ((comb ((const =) const zero)) comb ((const INT) const |0|)))) (INT pred HOL_ASSERT comb ((const HOL_DEFINITION) comb ((const !) abs ((var x num) comb ((comb ((const =) comb ((const INT) var x))) comb ((const PROJ_zet) comb ((comb ((const |,|) var x num)) const |0|))) bool)))) (REV pred HOL_ASSERT comb ((const HOL_DEFINITION) comb ((const !) abs ((var p1 num) comb ((const !) abs ((var p2 num) comb ((comb ((const =) comb ((const REV) comb ((const PROJ_zet) comb ((comb ((const |,|) var p1 num)) var p2 num))))) comb ((const PROJ_zet) comb ((comb ((const |,|) var p2 num)) var p1 num))) bool)) bool)))) (PROJ_zet pred HOL_ASSERT comb ((const HOL_DEFINITION) comb ((const !) abs ((var x %t . |,%0|) comb ((comb ((const =) comb ((const PROJ_zet) var x))) comb ((const ABS_zet) comb ((comb ((const MK_CLASS) const ZET_REL)) var x %t . |,%0|))) bool)))) (zet_ISO_DEF pred HOL_ASSERT comb ((const HOL_DEFINITION) comb ((comb ((const |/\\|) comb ((const !) abs ((var a zet) comb ((comb ((const =) comb ((const ABS_zet) comb ((const REP_zet) var a)))) var a zet) bool)))) comb ((const !) abs ((var r %t . r%3) comb ((comb ((const =) comb ((comb ((const IS_CLASS) const ZET_REL)) var r %t . r%3) bool)) comb ((comb ((const =) comb ((const REP_zet) comb ((const ABS_zet) var r)))) var r %t . r%3) bool) bool))))) (zet_TY_DEF pred HOL_ASSERT comb ((const HOL_DEFINITION) comb ((const ?) abs ((var rep %t . rep%1) comb ((comb ((const TYPE_DEFINITION) comb ((const IS_CLASS) const ZET_REL) %t . IS_CLASS%2)) var rep %t . rep%1) bool)))) (PRE_MULT pred HOL_ASSERT comb ((const HOL_DEFINITION) comb ((const !) abs ((var m1 num) comb ((const !) abs ((var n1 num) comb ((const !) abs ((var m2 num) comb ((const !) abs ((var n2 num) comb ((comb ((const =) comb ((comb ((const PRE_MULT) comb ((comb ((const |,|) var m1 num)) var n1 num))) comb ((comb ((const |,|) var m2 num)) var n2 num)))) comb ((comb ((const |,|) comb ((comb ((const +) comb ((comb ((const *) var m1)) var m2))) comb ((comb ((const *) var n1)) var n2)))) comb ((comb ((const +) comb ((comb ((const *) var m1)) var n2))) comb ((comb ((const *) var m2)) var n1))) %t . |,%0|) bool)) bool)) bool)) bool)))) (PRE_PLUS pred HOL_ASSERT comb ((const HOL_DEFINITION) comb ((const !) abs ((var m1 num) comb ((const !) abs ((var n1 num) comb ((const !) abs ((var m2 num) comb ((const !) abs ((var n2 num) comb ((comb ((const =) comb ((comb ((const PRE_PLUS) comb ((comb ((const |,|) var m1 num)) var n1 num))) comb ((comb ((const |,|) var m2 num)) var n2 num)))) comb ((comb ((const |,|) comb ((comb ((const +) var m1)) var m2))) comb ((comb ((const +) var n1)) var n2)) %t . |,%0|) bool)) bool)) bool)) bool)))) (PRE_REV pred HOL_ASSERT comb ((const HOL_DEFINITION) comb ((const !) abs ((var m1 num) comb ((const !) abs ((var n1 num) comb ((comb ((const =) comb ((const PRE_REV) comb ((comb ((const |,|) var m1 num)) var n1 num)))) comb ((comb ((const |,|) var n1 num)) var m1 num) %t . |,%0|) bool)) bool)))) (ZET_REL pred HOL_ASSERT comb ((const HOL_DEFINITION) comb ((const !) abs ((var m1 num) comb ((const !) abs ((var n1 num) comb ((const !) abs ((var m2 num) comb ((const !) abs ((var n2 num) comb ((comb ((const =) comb ((comb ((const ZET_REL) comb ((comb ((const |,|) var m1 num)) var n1 num))) comb ((comb ((const |,|) var m2 num)) var n2 num)))) comb ((comb ((const =) comb ((comb ((const +) var m1)) var n2))) comb ((comb ((const +) var m2)) var n1)) bool) bool)) bool)) bool)) bool))))) (fact (PI_APPEND pred HOL_ASSERT comb ((const !) abs ((var l1 %t . tl%12) comb ((const !) abs ((var l2 %t . tl%12) comb ((comb ((const =) comb ((const PI) comb ((comb ((const APPEND) var l1 %t . tl%12)) var l2 %t . tl%12)))) comb ((comb ((const mult) comb ((const PI) var l1))) comb ((const PI) var l2))) bool)) bool)) bool) (SIGMA_APPEND pred HOL_ASSERT comb ((const !) abs ((var l1 %t . tl%12) comb ((const !) abs ((var l2 %t . tl%12) comb ((comb ((const =) comb ((const SIGMA) comb ((comb ((const APPEND) var l1 %t . tl%12)) var l2 %t . tl%12)))) comb ((comb ((const plus) comb ((const SIGMA) var l1))) comb ((const SIGMA) var l2))) bool)) bool)) bool) (MAX_EXISTS pred HOL_ASSERT comb ((const !) abs ((var Q %t . Q%8) comb ((const !) abs ((var k zet) comb ((const !) abs ((var l zet) comb ((comb ((const ==>) comb ((comb ((const |/\\|) comb ((const !) abs ((var x zet) comb ((comb ((const ==>) comb ((comb ((const leq) var k)) var x))) comb ((const ~) comb ((var Q %t . Q%8) var x))))))) comb ((var Q %t . Q%8) var l)))) comb ((comb ((const |/\\|) comb ((var Q %t . Q%8) comb ((const MAX) var Q)))) comb ((const !) abs ((var w zet) comb ((comb ((const ==>) comb ((var Q %t . Q%8) var w))) comb ((comb ((const leq) var w)) comb ((const MAX) var Q))))))))) bool)) bool)) bool) (MIN_EXISTS pred HOL_ASSERT comb ((const !) abs ((var Q %t . Q%8) comb ((const !) abs ((var k zet) comb ((const !) abs ((var l zet) comb ((comb ((const ==>) comb ((comb ((const |/\\|) comb ((const !) abs ((var x zet) comb ((comb ((const ==>) comb ((comb ((const leq) var x)) var k))) comb ((const ~) comb ((var Q %t . Q%8) var x))))))) comb ((var Q %t . Q%8) var l)))) comb ((comb ((const |/\\|) comb ((var Q %t . Q%8) comb ((const MIN) var Q)))) comb ((const !) abs ((var w zet) comb ((comb ((const ==>) comb ((var Q %t . Q%8) var w))) comb ((comb ((const leq) comb ((const MIN) var Q))) var w)))))))) bool)) bool)) bool) (LESS_MULT pred HOL_ASSERT comb ((const !) abs ((var x zet) comb ((const !) abs ((var y zet) comb ((comb ((const ==>) comb ((comb ((const |/\\|) comb ((comb ((const less) const zero)) var x))) comb ((comb ((const less) const zero)) var y)))) comb ((comb ((const less) const zero)) comb ((comb ((const mult) var x)) var y))))) bool)) bool) (MULT_EQ_ZERO pred HOL_ASSERT comb ((const !) abs ((var x zet) comb ((const !) abs ((var y zet) comb ((comb ((const =) comb ((comb ((const =) comb ((comb ((const mult) var x)) var y))) const zero) bool)) comb ((comb ((const |\\/|) comb ((comb ((const =) var x zet)) const zero))) comb ((comb ((const =) var y zet)) const zero))) bool)) bool)) bool) (LEQ_MULT pred HOL_ASSERT comb ((const !) abs ((var x zet) comb ((const !) abs ((var y zet) comb ((comb ((const ==>) comb ((comb ((const |/\\|) comb ((comb ((const leq) const zero)) var x))) comb ((comb ((const leq) const zero)) var y)))) comb ((comb ((const leq) const zero)) comb ((comb ((const mult) var x)) var y))))) bool)) bool) (MULT_ASSOC pred HOL_ASSERT comb ((const !) abs ((var x zet) comb ((const !) abs ((var y zet) comb ((const !) abs ((var z zet) comb ((comb ((const =) comb ((comb ((const mult) var x)) comb ((comb ((const mult) var y)) var z)))) comb ((comb ((const mult) comb ((comb ((const mult) var x)) var y))) var z)) bool)) bool)) bool)) bool) (REV_MULT2 pred HOL_ASSERT comb ((const !) abs ((var x zet) comb ((const !) abs ((var y zet) comb ((comb ((const =) comb ((const REV) comb ((comb ((const mult) var x)) var y)))) comb ((comb ((const mult) var x)) comb ((const REV) var y))) bool)) bool)) bool) (REV_MULT1 pred HOL_ASSERT comb ((const !) abs ((var x zet) comb ((const !) abs ((var y zet) comb ((comb ((const =) comb ((const REV) comb ((comb ((const mult) var x)) var y)))) comb ((comb ((const mult) comb ((const REV) var x))) var y)) bool)) bool)) bool) (PLUS_RIGHT_DISTRIB pred HOL_ASSERT comb ((const !) abs ((var x zet) comb ((const !) abs ((var y zet) comb ((const !) abs ((var z zet) comb ((comb ((const =) comb ((comb ((const mult) comb ((comb ((const plus) var y)) var z))) var x))) comb ((comb ((const plus) comb ((comb ((const mult) var y)) var x))) comb ((comb ((const mult) var z)) var x))) bool)) bool)) bool)) bool) (PLUS_LEFT_DISTRIB pred HOL_ASSERT comb ((const !) abs ((var x zet) comb ((const !) abs ((var y zet) comb ((const !) abs ((var z zet) comb ((comb ((const =) comb ((comb ((const mult) var x)) comb ((comb ((const plus) var y)) var z)))) comb ((comb ((const plus) comb ((comb ((const mult) var x)) var y))) comb ((comb ((const mult) var x)) var z))) bool)) bool)) bool)) bool) (MULT_COM pred HOL_ASSERT comb ((const !) abs ((var x zet) comb ((const !) abs ((var y zet) comb ((comb ((const =) comb ((comb ((const mult) var x)) var y))) comb ((comb ((const mult) var y)) var x)) bool)) bool)) bool) (ONE_MULT pred HOL_ASSERT comb ((comb ((const |/\\|) comb ((const !) abs ((var x zet) comb ((comb ((const =) comb ((comb ((const mult) var x)) const een))) var x zet) bool)))) comb ((const !) abs ((var x zet) comb ((comb ((const =) comb ((comb ((const mult) const een)) var x))) var x zet) bool)))) (ZERO_MULT pred HOL_ASSERT comb ((comb ((const |/\\|) comb ((const !) abs ((var x zet) comb ((comb ((const =) comb ((comb ((const mult) var x)) const zero))) const zero) bool)))) comb ((const !) abs ((var x zet) comb ((comb ((const =) comb ((comb ((const mult) const zero)) var x))) const zero) bool)))) (INT_MULT pred HOL_ASSERT comb ((const !) abs ((var x num) comb ((const !) abs ((var y num) comb ((comb ((const =) comb ((comb ((const mult) comb ((const INT) var x))) comb ((const INT) var y)))) comb ((const INT) comb ((comb ((const *) var x)) var y))) bool)) bool)) bool) (LESS_LEQ_CASES pred HOL_ASSERT comb ((const !) abs ((var k zet) comb ((const !) abs ((var x zet) comb ((comb ((const |\\/|) comb ((comb ((const leq) var x)) var k))) comb ((comb ((const less) var k)) var x)))) bool)) bool) (REV_LESS pred HOL_ASSERT comb ((const !) abs ((var x zet) comb ((const !) abs ((var y zet) comb ((comb ((const =) comb ((comb ((const less) var x)) var y))) comb ((comb ((const less) comb ((const REV) var y))) comb ((const REV) var x))) bool)) bool)) bool) (TRANSITIVITY_CLAUSES pred HOL_ASSERT comb ((comb ((const |/\\|) comb ((const !) abs ((var x zet) comb ((const !) abs ((var y zet) comb ((const !) abs ((var z zet) comb ((comb ((const ==>) comb ((comb ((const |/\\|) comb ((comb ((const leq) var x)) var y))) comb ((comb ((const leq) var y)) var z)))) comb ((comb ((const leq) var x)) var z)))) bool)) bool)))) comb ((comb ((const |/\\|) comb ((const !) abs ((var x zet) comb ((const !) abs ((var y zet) comb ((const !) abs ((var z zet) comb ((comb ((const ==>) comb ((comb ((const |/\\|) comb ((comb ((const less) var x)) var y))) comb ((comb ((const leq) var y)) var z)))) comb ((comb ((const less) var x)) var z)))) bool)) bool)))) comb ((comb ((const |/\\|) comb ((const !) abs ((var x zet) comb ((const !) abs ((var y zet) comb ((const !) abs ((var z zet) comb ((comb ((const ==>) comb ((comb ((const |/\\|) comb ((comb ((const leq) var x)) var y))) comb ((comb ((const less) var y)) var z)))) comb ((comb ((const less) var x)) var z)))) bool)) bool)))) comb ((const !) abs ((var x zet) comb ((const !) abs ((var y zet) comb ((const !) abs ((var z zet) comb ((comb ((const ==>) comb ((comb ((const |/\\|) comb ((comb ((const less) var x)) var y))) comb ((comb ((const less) var y)) var z)))) comb ((comb ((const less) var x)) var z)))) bool)) bool)))))) (IRREFLEX_LESS pred HOL_ASSERT comb ((const !) abs ((var x zet) comb ((const ~) comb ((comb ((const less) var x)) var x)))) bool) (LESS_LEQ pred HOL_ASSERT comb ((const !) abs ((var x zet) comb ((const !) abs ((var y zet) comb ((comb ((const =) comb ((comb ((const less) var x)) var y))) comb ((comb ((const |/\\|) comb ((comb ((const leq) var x)) var y))) comb ((const ~) comb ((comb ((const =) var x zet)) var y zet)))) bool)) bool)) bool) (MULT_UNIQUE pred HOL_ASSERT comb ((const !) abs ((var f %t . f%7) comb ((comb ((const ==>) comb ((const !) abs ((var p11 num) comb ((const !) abs ((var p12 num) comb ((const !) abs ((var p2 num) comb ((const !) abs ((var p3 num) comb ((comb ((const =) comb ((comb ((var f %t . f%7) comb ((const PROJ_zet) comb ((comb ((const |,|) var p11 num)) var p12 num)))) comb ((const PROJ_zet) comb ((comb ((const |,|) var p2 num)) var p3 num))))) comb ((const PROJ_zet) comb ((comb ((const |,|) comb ((comb ((const +) comb ((comb ((const *) var p11)) var p2))) comb ((comb ((const *) var p12)) var p3)))) comb ((comb ((const +) comb ((comb ((const *) var p11)) var p3))) comb ((comb ((const *) var p2)) var p12))))) bool)) bool)) bool)) bool)))) comb ((comb ((const =) const mult)) var f %t . f%7)))) bool) (DISCRETE_ZET pred HOL_ASSERT comb ((const !) abs ((var k zet) comb ((const !) abs ((var x zet) comb ((comb ((const |\\/|) comb ((comb ((const leq) var x)) var k))) comb ((comb ((const leq) comb ((comb ((const plus) var k)) const een))) var x)))) bool)) bool) (zet_Axiom pred HOL_ASSERT comb ((const !) abs ((var k zet) comb ((const !) abs ((var c %t . c%9) comb ((const !) abs ((var fd %t . fd%10) comb ((const !) abs ((var fu %t . fd%10) comb ((const ?!) abs ((var f %t . f%11) comb ((comb ((const |/\\|) comb ((comb ((const =) comb ((var f %t . f%11) var k))) var c %t . c%9))) comb ((comb ((const |/\\|) comb ((const !) abs ((var x zet) comb ((comb ((const ==>) comb ((comb ((const leq) var x)) var k))) comb ((comb ((const =) comb ((var f %t . f%11) comb ((comb ((const minus) var x)) const een)))) comb ((comb ((var fd %t . fd%10) comb ((var f %t . f%11) var x))) var x))))))) comb ((const !) abs ((var x zet) comb ((comb ((const ==>) comb ((comb ((const leq) var k)) var x))) comb ((comb ((const =) comb ((var f %t . f%11) comb ((comb ((const plus) var x)) const een)))) comb ((comb ((var fu %t . fd%10) comb ((var f %t . f%11) var x))) var x))))))))) bool)) bool)) bool)) bool)) bool) (ZET_REC_THM pred HOL_ASSERT comb ((const !) abs ((var k zet) comb ((const !) abs ((var c %t . c%9) comb ((const !) abs ((var fd %t . fd%10) comb ((const !) abs ((var fu %t . fd%10) comb ((const ?) abs ((var f %t . f%11) comb ((comb ((const |/\\|) comb ((comb ((const =) comb ((var f %t . f%11) var k))) var c %t . c%9))) comb ((comb ((const |/\\|) comb ((const !) abs ((var x zet) comb ((comb ((const ==>) comb ((comb ((const leq) var x)) var k))) comb ((comb ((const =) comb ((var f %t . f%11) comb ((comb ((const minus) var x)) const een)))) comb ((comb ((var fd %t . fd%10) comb ((var f %t . f%11) var x))) var x))))))) comb ((const !) abs ((var x zet) comb ((comb ((const ==>) comb ((comb ((const leq) var k)) var x))) comb ((comb ((const =) comb ((var f %t . f%11) comb ((comb ((const plus) var x)) const een)))) comb ((comb ((var fu %t . fd%10) comb ((var f %t . f%11) var x))) var x))))))))) bool)) bool)) bool)) bool)) bool) (ZET_INDUCTION2 pred HOL_ASSERT comb ((const !) abs ((var k zet) comb ((const !) abs ((var Q %t . Q%8) comb ((comb ((const ==>) comb ((comb ((const |/\\|) comb ((var Q %t . Q%8) var k))) comb ((comb ((const |/\\|) comb ((const !) abs ((var x zet) comb ((comb ((const ==>) comb ((comb ((const |/\\|) comb ((comb ((const leq) var x)) var k))) comb ((var Q %t . Q%8) var x)))) comb ((var Q %t . Q%8) comb ((comb ((const minus) var x)) const een))))))) comb ((const !) abs ((var x zet) comb ((comb ((const ==>) comb ((comb ((const |/\\|) comb ((comb ((const leq) var k)) var x))) comb ((var Q %t . Q%8) var x)))) comb ((var Q %t . Q%8) comb ((comb ((const plus) var x)) const een))))))))) comb ((const !) abs ((var x zet) comb ((var Q %t . Q%8) var x)))))) bool)) bool) (ZET_INDUCTION1 pred HOL_ASSERT comb ((const !) abs ((var k zet) comb ((const !) abs ((var Q %t . Q%8) comb ((comb ((const ==>) comb ((comb ((const |/\\|) comb ((const !) abs ((var x zet) comb ((comb ((const ==>) comb ((comb ((const leq) var x)) var k))) comb ((var Q %t . Q%8) var x)))))) comb ((const !) abs ((var x zet) comb ((comb ((const ==>) comb ((comb ((const |/\\|) comb ((comb ((const leq) var k)) var x))) comb ((var Q %t . Q%8) var x)))) comb ((var Q %t . Q%8) comb ((comb ((const plus) var x)) const een)))))))) comb ((const !) abs ((var x zet) comb ((var Q %t . Q%8) var x)))))) bool)) bool) (ZET_INDUCTION0 pred HOL_ASSERT comb ((const !) abs ((var Q %t . Q%8) comb ((comb ((const ==>) comb ((comb ((const |/\\|) comb ((const !) abs ((var x zet) comb ((comb ((const ==>) comb ((const NEG) var x))) comb ((var Q %t . Q%8) var x)))))) comb ((const !) abs ((var x zet) comb ((comb ((const ==>) comb ((comb ((const |/\\|) comb ((const POS) var x))) comb ((var Q %t . Q%8) var x)))) comb ((var Q %t . Q%8) comb ((comb ((const plus) var x)) const een)))))))) comb ((const !) abs ((var x zet) comb ((var Q %t . Q%8) var x)))))) bool) (ZERO_LEQ_ONE pred HOL_ASSERT comb ((const !) abs ((var x zet) comb ((comb ((const ==>) comb ((comb ((const |\\/|) comb ((comb ((const leq) const een)) var x))) comb ((comb ((const leq) var x)) comb ((const REV) const een))))) comb ((const ~) comb ((comb ((const =) var x zet)) const zero))))) bool) (ONE_PROPER_LEQ pred HOL_ASSERT comb ((const !) abs ((var x zet) comb ((comb ((const |/\\|) comb ((const ~) comb ((comb ((const =) comb ((comb ((const minus) var x)) const een))) var x zet)))) comb ((const ~) comb ((comb ((const =) comb ((comb ((const plus) var x)) const een))) var x zet))))) bool) (ONE_LEQ pred HOL_ASSERT comb ((const !) abs ((var x zet) comb ((comb ((const |/\\|) comb ((comb ((const leq) comb ((comb ((const minus) var x)) const een))) var x))) comb ((comb ((const leq) var x)) comb ((comb ((const plus) var x)) const een))))) bool) (REV_LEQ pred HOL_ASSERT comb ((const !) abs ((var x zet) comb ((const !) abs ((var y zet) comb ((comb ((const =) comb ((comb ((const leq) var x)) var y))) comb ((comb ((const leq) comb ((const REV) var y))) comb ((const REV) var x))) bool)) bool)) bool) (LEQ_CLAUSES pred HOL_ASSERT comb ((comb ((const |/\\|) comb ((const !) abs ((var x num) comb ((comb ((const leq) const zero)) comb ((const INT) var x)))))) comb ((const !) abs ((var x num) comb ((comb ((const leq) comb ((const REV) comb ((const INT) var x)))) const zero))))) (ZERO_NOT_ONE pred HOL_ASSERT comb ((comb ((const |/\\|) comb ((const ~) comb ((comb ((const =) const zero)) const een)))) comb ((const ~) comb ((comb ((const =) const een)) const zero)))) (INT_LEQ pred HOL_ASSERT comb ((const !) abs ((var x num) comb ((const !) abs ((var y num) comb ((comb ((const =) comb ((comb ((const leq) comb ((const INT) var x))) comb ((const INT) var y)))) comb ((comb ((const <=) var x)) var y)) bool)) bool)) bool) (TRANSLATION_LEQ pred HOL_ASSERT comb ((const !) abs ((var x zet) comb ((const !) abs ((var y zet) comb ((const !) abs ((var z zet) comb ((comb ((const ==>) comb ((comb ((const leq) var x)) var y))) comb ((comb ((const leq) comb ((comb ((const plus) var x)) var z))) comb ((comb ((const plus) var y)) var z))))) bool)) bool)) bool) (LINEAR_LEQ pred HOL_ASSERT comb ((const !) abs ((var x zet) comb ((const !) abs ((var y zet) comb ((comb ((const |\\/|) comb ((comb ((const leq) var x)) var y))) comb ((comb ((const leq) var y)) var x)))) bool)) bool) (TRANSITIVITY_LEQ pred HOL_ASSERT comb ((const !) abs ((var x zet) comb ((const !) abs ((var y zet) comb ((const !) abs ((var z zet) comb ((comb ((const ==>) comb ((comb ((const |/\\|) comb ((comb ((const leq) var x)) var y))) comb ((comb ((const leq) var y)) var z)))) comb ((comb ((const leq) var x)) var z)))) bool)) bool)) bool) (ANTI_SYM_LEQ pred HOL_ASSERT comb ((const !) abs ((var x zet) comb ((const !) abs ((var y zet) comb ((comb ((const ==>) comb ((comb ((const |/\\|) comb ((comb ((const leq) var x)) var y))) comb ((comb ((const leq) var y)) var x)))) comb ((comb ((const =) var x zet)) var y zet)))) bool)) bool) (REFLEX_LEQ pred HOL_ASSERT comb ((const !) abs ((var x zet) comb ((comb ((const leq) var x)) var x))) bool) (ISO_PLUS_K pred HOL_ASSERT comb ((const !) abs ((var k zet) comb ((const ISO) comb ((const plus) var k)) bool)) bool) (MINUS_PROP pred HOL_ASSERT comb ((comb ((const |/\\|) comb ((const !) abs ((var x zet) comb ((const !) abs ((var y zet) comb ((comb ((const =) comb ((comb ((const plus) var x)) comb ((comb ((const minus) var y)) var x)))) var y zet) bool)) bool)))) comb ((const !) abs ((var x zet) comb ((const !) abs ((var y zet) comb ((comb ((const =) comb ((comb ((const plus) comb ((comb ((const minus) var y)) var x))) var x))) var y zet) bool)) bool)))) (PLUS_ASSOC pred HOL_ASSERT comb ((const !) abs ((var x zet) comb ((const !) abs ((var y zet) comb ((const !) abs ((var z zet) comb ((comb ((const =) comb ((comb ((const plus) var x)) comb ((comb ((const plus) var y)) var z)))) comb ((comb ((const plus) comb ((comb ((const plus) var x)) var y))) var z)) bool)) bool)) bool)) bool) (PLUS_COM pred HOL_ASSERT comb ((const !) abs ((var x zet) comb ((const !) abs ((var y zet) comb ((comb ((const =) comb ((comb ((const plus) var x)) var y))) comb ((comb ((const plus) var y)) var x)) bool)) bool)) bool) (REV_PLUS_ZERO pred HOL_ASSERT comb ((comb ((const |/\\|) comb ((const !) abs ((var x zet) comb ((comb ((const =) comb ((comb ((const plus) var x)) comb ((const REV) var x)))) const zero) bool)))) comb ((const !) abs ((var x zet) comb ((comb ((const =) comb ((comb ((const plus) comb ((const REV) var x))) var x))) const zero) bool)))) (ZERO_PLUS pred HOL_ASSERT comb ((comb ((const |/\\|) comb ((const !) abs ((var x zet) comb ((comb ((const =) comb ((comb ((const plus) var x)) const zero))) var x zet) bool)))) comb ((const !) abs ((var x zet) comb ((comb ((const =) comb ((comb ((const plus) const zero)) var x))) var x zet) bool)))) (REV_PLUS pred HOL_ASSERT comb ((const !) abs ((var x zet) comb ((const !) abs ((var y zet) comb ((comb ((const =) comb ((const REV) comb ((comb ((const plus) var x)) var y)))) comb ((comb ((const plus) comb ((const REV) var x))) comb ((const REV) var y))) bool)) bool)) bool) (INT_PLUS pred HOL_ASSERT comb ((const !) abs ((var x num) comb ((const !) abs ((var y num) comb ((comb ((const =) comb ((comb ((const plus) comb ((const INT) var x))) comb ((const INT) var y)))) comb ((const INT) comb ((comb ((const +) var x)) var y))) bool)) bool)) bool) (PLUS_UNIQUE pred HOL_ASSERT comb ((const !) abs ((var f %t . f%7) comb ((comb ((const ==>) comb ((const !) abs ((var p11 num) comb ((const !) abs ((var p12 num) comb ((const !) abs ((var p2 num) comb ((const !) abs ((var p3 num) comb ((comb ((const =) comb ((comb ((var f %t . f%7) comb ((const PROJ_zet) comb ((comb ((const |,|) var p11 num)) var p12 num)))) comb ((const PROJ_zet) comb ((comb ((const |,|) var p2 num)) var p3 num))))) comb ((const PROJ_zet) comb ((comb ((const |,|) comb ((comb ((const +) var p11)) var p2))) comb ((comb ((const +) var p12)) var p3)))) bool)) bool)) bool)) bool)))) comb ((comb ((const =) const plus)) var f %t . f%7)))) bool) (POS_PROP2 pred HOL_ASSERT comb ((const !) abs ((var x zet) comb ((comb ((const ==>) comb ((comb ((const |/\\|) comb ((const POS) var x))) comb ((const POS) comb ((const REV) var x))))) comb ((comb ((const =) var x zet)) const zero)))) bool) (POS_PROP1 pred HOL_ASSERT comb ((const !) abs ((var x zet) comb ((comb ((const |\\/|) comb ((const POS) var x))) comb ((const POS) comb ((const REV) var x))))) bool) (FIX_REV pred HOL_ASSERT comb ((const !) abs ((var x zet) comb ((comb ((const =) comb ((comb ((const =) comb ((const REV) var x))) var x zet) bool)) comb ((comb ((const =) var x zet)) const zero) bool) bool)) bool) (INV_INT pred HOL_ASSERT comb ((const ONE_ONE) const INT) bool) (REV2_ID pred HOL_ASSERT comb ((const !) abs ((var x zet) comb ((comb ((const =) comb ((const REV) comb ((const REV) var x)))) var x zet) bool)) bool) (REV_UNIQUE pred HOL_ASSERT comb ((const !) abs ((var f %t . f%6) comb ((comb ((const ==>) comb ((const !) abs ((var p1 num) comb ((const !) abs ((var p2 num) comb ((comb ((const =) comb ((var f %t . f%6) comb ((const PROJ_zet) comb ((comb ((const |,|) var p1 num)) var p2 num))))) comb ((const PROJ_zet) comb ((comb ((const |,|) var p2 num)) var p1 num))) bool)) bool)))) comb ((comb ((const =) const REV)) var f %t . f%6)))) bool) (FACTOR_PROJ_zet_THM pred HOL_ASSERT comb ((const !) abs ((var f %t . f%4) comb ((comb ((const ==>) comb ((const !) abs ((var x %t . |,%0|) comb ((const !) abs ((var y %t . |,%0|) comb ((comb ((const ==>) comb ((comb ((const ZET_REL) var x)) var y))) comb ((comb ((const =) comb ((var f %t . f%4) var x))) comb ((var f %t . f%4) var y))))) bool)))) comb ((const ?!) abs ((var h %t . h%5) comb ((comb ((const =) var f %t . f%4)) comb ((comb ((const o) var h %t . h%5)) const PROJ_zet) %t . f%4) bool))))) bool) (UNIV_PROJ_zet_THM pred HOL_ASSERT comb ((const !) abs ((var x %t . |,%0|) comb ((const !) abs ((var y %t . |,%0|) comb ((comb ((const =) comb ((comb ((const =) comb ((const PROJ_zet) var x))) comb ((const PROJ_zet) var y)) bool)) comb ((comb ((const ZET_REL) var x)) var y)) bool)) bool)) bool) (SURJ_PROJ_zet_THM pred HOL_ASSERT comb ((const ONTO) const PROJ_zet) bool) (EQUIVALENCE_ZET_REL pred HOL_ASSERT comb ((const EQUIVALENCE) const ZET_REL) bool))))
